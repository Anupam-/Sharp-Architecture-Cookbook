//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

using System.Collections.Generic;
using MvcContrib.Pagination;
using SharpArchCookbook.Domain;
using SharpArchCookbook.Web.Mvc.Controllers.ViewModels;

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace MSpecTests.SharpArchCookbook.Web.Mvc.Controllers
{
    using System.Web.Mvc;

    using global::SharpArchCookbook.Domain.Contracts.Tasks;
    using global::SharpArchCookbook.Web.Mvc.Controllers;
    using global::SharpArchCookbook.Web.Mvc.Controllers.Queries.Products;

    using Machine.Specifications;
    using Machine.Specifications.AutoMocking.Rhino;
    using Machine.Specifications.Mvc;
    using Rhino.Mocks;

    public abstract class specification_for_products_controller : Specification<ProductsController>
    {
        protected static IProductTasks product_tasks;
        protected static IProductsListQuery products_list_query;

        Establish context = () =>
        {
            product_tasks = DependencyOf<IProductTasks>();
            products_list_query = DependencyOf<IProductsListQuery>();
        };
    }

    [Subject(typeof(ProductsController))]
    public class when_the_products_controller_is_asked_for_the_default_view : specification_for_products_controller
    {
        static ProductsListViewModel the_view_model;
        static IPagination<ProductViewModel> products;
        static ActionResult result;

        Establish context = () =>
                                {
                                    the_view_model = new ProductsListViewModel();
                                    products_list_query.Stub(x => x.GetPagedList(0, 50)).Return(products);
                                    the_view_model.Products = products;
                                };

        Because of = () => result = subject.Index(null);

        It should_return_the_default_view = () => result.ShouldBeAView().And().ShouldUseDefaultView();
    }

    [Subject(typeof(ProductsController))]
    public class when_the_products_controller_is_asked_to_get_products_for_sale : specification_for_products_controller
    {
        static ActionResult result;
        static IList<Product> products_List;

        Establish context = () => product_tasks.Stub(p => p.GetProductsForSale()).Return(products_List);

        Because of = () => result = subject.ForSale();

        It should_get_products_from_product_tasks = () => product_tasks.AssertWasCalled(p => p.GetProductsForSale());
    }
}
