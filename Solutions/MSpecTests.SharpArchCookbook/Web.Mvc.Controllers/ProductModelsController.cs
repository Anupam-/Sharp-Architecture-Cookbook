//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

using SharpArchCookbook.Domain;

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace MSpecTests.SharpArchCookbook.Web.Mvc.Controllers
{
    using System.Web.Mvc;

    using System;
    using System.Collections.Generic;
    
    using global::SharpArchCookbook.Domain.Contracts.Tasks;
    using global::SharpArchCookbook.Web.Mvc.Controllers;

    using Machine.Specifications;
    using Machine.Specifications.AutoMocking.Rhino;
    using Machine.Specifications.Mvc;
    using Rhino.Mocks;

    public abstract class specification_for_product_models_controller : Specification<ProductModelsController>
    {
        protected static IProductModelTasks product_model_tasks;
        
        Establish context = () => {
            product_model_tasks = DependencyOf<IProductModelTasks>();
        };
    }

    [Subject(typeof(ProductModelsController))]
    public class when_the_product_models_controller_is_asked_for_the_default_view : specification_for_product_models_controller
    {
        static List<ProductModel> the_view_model;
        static ActionResult result;

        Establish context = () => {
                                    product_model_tasks.Stub(x => x.GetAll()).Return(the_view_model);
                                  };

        Because of = () => result = subject.Index();

        It should_return_the_default_view = () => result.ShouldBeAView().And().ShouldUseDefaultView();
    }

    [Subject(typeof(ProductModelsController))]
    public class when_the_products_controller_is_to_create_or_update : specification_for_product_models_controller
    {
        static ActionResult result;
        static ProductModel product_model;

        private Establish context = () =>
                                        {
                                            product_model = new ProductModel
                                                                {
                                                                    ModifiedDate = DateTime.Now,
                                                                    Name = "Hello"
                                                                };
                                        };

        Because of = () => result = subject.CreateOrUpdate(product_model);

        It it_should_ask_tasks_to_add_new_product_model = () => product_model_tasks.CreateOrUpdate(product_model);
    }
}
